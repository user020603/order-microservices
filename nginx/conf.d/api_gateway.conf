# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# API keys mapping - in production, use a more secure method
map $http_x_api_key $api_client {
    default       "";
    "key123"     "trusted_client";
    "key456"     "admin_client";
}

# Upstream definitions
upstream user_service {
    server user-service:8080;
}

upstream order_service {
    server order-service:8081;
}

# Main server configuration
server {
    listen 80;
    server_name localhost;
    access_log /var/log/nginx/api_access.log api_log;

    # Error log
    error_log /var/log/nginx/api_error.log;

    # Security headers
    add_header X-Frame-Options "DENY";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # CORS configuration
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Api-Key';

    location /api/ {
        if ($api_client = "") {
            return 401 '{"error": "Invalid API key"}';
        }
    }

    location /health {
        satisfy any;
        allow all;
        access_log off;
        default_type application/json;
        return 200 '{"status": "healthy"}';
    }

    # User Service routes
    location /api/users {
        # Rate limiting
        limit_req zone=api_limit burst=5 nodelay;

        # Proxy settings
        proxy_pass http://user_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Request size limits
        client_max_body_size 1m;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Error handling
        proxy_intercept_errors on;
        error_page 404 = @notfound;
        error_page 503 = @maintenance;
    }

    # Order Service routes
    location /api/orders/ {
        # Rate limiting
        limit_req zone=api_limit burst=5 nodelay;

        # Proxy settings
        proxy_pass http://order_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Request size limits
        client_max_body_size 1m;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Error handling
        proxy_intercept_errors on;
        error_page 404 = @notfound;
        error_page 503 = @maintenance;
    }

    # Custom error responses
    location @notfound {
        return 404 '{"error": "Resource not found"}';
    }

    location @maintenance {
        return 503 '{"error": "Service temporarily unavailable"}';
    }

    # Deny access to . files
    location ~ /\. {
        deny all;
    }
}