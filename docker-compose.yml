version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ordersdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_network

  # Redis
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    networks:
      - microservices_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices_network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_container
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices_network

  # Nginx
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80"
      - "8082:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - user-service
      - order-service
    networks:
      - microservices_network

  # User Service (Spring Boot)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service_container
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ordersdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MAVEN_OPTS: "-Xmx512m -XX:MaxPermSize=128m"
    networks:
      - microservices_network
    restart: always

  # Order Service (Go)
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order_service_container
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      DB_HOST: postgres
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: ordersdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    networks:
      - microservices_network
    restart: always

volumes:
  postgres_data:

networks:
  microservices_network: